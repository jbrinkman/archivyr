name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  GO_VERSION: "1.24.3"

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run unit tests with race detector and coverage
        run: go test ./... -v -race -coverprofile=coverage.out -covermode=atomic

      - name: Run integration tests
        run: |
          if [ -d "./test/integration" ]; then
            go test ./test/integration/... -v -race
          else
            echo "Integration tests directory not found, skipping..."
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        if: hashFiles('docker/Dockerfile') != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: mcp-ruleset-server:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container smoke tests
        if: hashFiles('docker/Dockerfile') != ''
        run: |
          # Start container in background
          docker run -d --name mcp-test mcp-ruleset-server:test

          # Wait for container to initialize
          sleep 5

          # Check if container is running
          if ! docker ps | grep -q mcp-test; then
            echo "Container failed to start"
            docker logs mcp-test
            exit 1
          fi

          # Check container logs for successful startup
          docker logs mcp-test

          # Cleanup
          docker stop mcp-test
          docker rm mcp-test

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run end-to-end tests
        run: |
          if [ -d "./test/e2e" ]; then
            go test ./test/e2e/... -v
          else
            echo "E2E tests directory not found, skipping..."
          fi
